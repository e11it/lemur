"""empty message

Revision ID: 07a657c8f62b
Revises: b33c838cb669
Create Date: 2020-03-27 18:00:47.805491

"""

# revision identifiers, used by Alembic.
revision = '07a657c8f62b'
down_revision = 'b33c838cb669'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ciphers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('destinations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=32), nullable=True),
    sa.Column('options', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('plugin_name', sa.String(length=32), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dns_providers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('provider_type', sa.String(length=256), nullable=True),
    sa.Column('credentials', lemur.utils.Vault(), nullable=True),
    sa.Column('api_endpoint', sa.String(length=256), nullable=True),
    sa.Column('date_created', sqlalchemy_utils.types.arrow.ArrowType(), server_default=sa.text('now()'), nullable=False),
    sa.Column('status', sa.String(length=128), nullable=True),
    sa.Column('options', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('domains', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('domains',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('sensitive', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_domains_name'), 'domains', ['name'], unique=False)
    op.create_index('ix_domains_name_gin', 'domains', ['name'], unique=False, postgresql_ops={'name': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_table('notifications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=128), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('options', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('plugin_name', sa.String(length=32), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('label')
    )
    op.create_table('pending_dns_authorizations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('account_number', sa.String(length=128), nullable=True),
    sa.Column('domains', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('dns_provider_type', sa.String(length=128), nullable=True),
    sa.Column('options', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('policy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rotation_policies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('days', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=32), nullable=True),
    sa.Column('options', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('plugin_name', sa.String(length=32), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('last_run', sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('label')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
    sa.Column('username', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('profile_picture', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('ttl', sa.BigInteger(), nullable=True),
    sa.Column('issued_at', sa.BigInteger(), nullable=True),
    sa.Column('revoked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('authorities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('chain', sa.Text(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('plugin_name', sa.String(length=64), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('options', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('date_created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('policies_ciphers',
    sa.Column('cipher_id', sa.Integer(), nullable=True),
    sa.Column('policy_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cipher_id'], ['ciphers.id'], ),
    sa.ForeignKeyConstraint(['policy_id'], ['policy.id'], )
    )
    op.create_index('policies_ciphers_ix', 'policies_ciphers', ['cipher_id', 'policy_id'], unique=False)
    op.create_table('certificates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.String(length=128), nullable=True),
    sa.Column('owner', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('notify', sa.Boolean(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('chain', sa.Text(), nullable=True),
    sa.Column('csr', sa.Text(), nullable=True),
    sa.Column('private_key', lemur.utils.Vault(), nullable=True),
    sa.Column('issuer', sa.String(length=128), nullable=True),
    sa.Column('serial', sa.String(length=128), nullable=True),
    sa.Column('cn', sa.String(length=128), nullable=True),
    sa.Column('deleted', sa.Boolean(), nullable=True),
    sa.Column('dns_provider_id', sa.Integer(), nullable=True),
    sa.Column('not_before', sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
    sa.Column('not_after', sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
    sa.Column('date_created', sqlalchemy_utils.types.arrow.ArrowType(), server_default=sa.text('now()'), nullable=False),
    sa.Column('signing_algorithm', sa.String(length=128), nullable=True),
    sa.Column('status', sa.String(length=128), nullable=True),
    sa.Column('bits', sa.Integer(), nullable=True),
    sa.Column('san', sa.String(length=1024), nullable=True),
    sa.Column('rotation', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('authority_id', sa.Integer(), nullable=True),
    sa.Column('root_authority_id', sa.Integer(), nullable=True),
    sa.Column('rotation_policy_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dns_provider_id'], ['dns_providers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['root_authority_id'], ['authorities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rotation_policy_id'], ['rotation_policies.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('ix_certificates_cn', 'certificates', ['cn'], unique=False, postgresql_ops={'cn': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index(op.f('ix_certificates_deleted'), 'certificates', ['deleted'], unique=False)
    op.create_index('ix_certificates_id_desc', 'certificates', [sa.text('id DESC')], unique=True, postgresql_using='btree')
    op.create_index('ix_certificates_name', 'certificates', ['name'], unique=False, postgresql_ops={'name': 'gin_trgm_ops'}, postgresql_using='gin')
    op.create_index('ix_certificates_not_after', 'certificates', [sa.text('not_after DESC')], unique=False)
    op.create_table('pending_certs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('external_id', sa.String(length=128), nullable=True),
    sa.Column('owner', sa.String(length=128), nullable=False),
    sa.Column('name', sa.String(length=256), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('notify', sa.Boolean(), nullable=True),
    sa.Column('number_attempts', sa.Integer(), nullable=True),
    sa.Column('rename', sa.Boolean(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('resolved_cert_id', sa.Integer(), nullable=True),
    sa.Column('cn', sa.String(length=128), nullable=True),
    sa.Column('csr', sa.Text(), nullable=False),
    sa.Column('chain', sa.Text(), nullable=True),
    sa.Column('private_key', lemur.utils.Vault(), nullable=True),
    sa.Column('date_created', sqlalchemy_utils.types.arrow.ArrowType(), server_default=sa.text('now()'), nullable=False),
    sa.Column('dns_provider_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Text(), nullable=True),
    sa.Column('last_updated', sqlalchemy_utils.types.arrow.ArrowType(), server_default=sa.text('now()'), nullable=False),
    sa.Column('rotation', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('authority_id', sa.Integer(), nullable=True),
    sa.Column('root_authority_id', sa.Integer(), nullable=True),
    sa.Column('rotation_policy_id', sa.Integer(), nullable=True),
    sa.Column('options', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dns_provider_id'], ['dns_providers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['root_authority_id'], ['authorities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rotation_policy_id'], ['rotation_policies.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('username', sa.String(length=128), nullable=True),
    sa.Column('password', lemur.utils.Vault(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('authority_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('third_party', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('certificate_associations',
    sa.Column('domain_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ),
    sa.ForeignKeyConstraint(['domain_id'], ['domains.id'], )
    )
    op.create_index('certificate_associations_ix', 'certificate_associations', ['domain_id', 'certificate_id'], unique=False)
    op.create_table('certificate_destination_associations',
    sa.Column('destination_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['destination_id'], ['destinations.id'], ondelete='cascade')
    )
    op.create_index('certificate_destination_associations_ix', 'certificate_destination_associations', ['destination_id', 'certificate_id'], unique=False)
    op.create_table('certificate_notification_associations',
    sa.Column('notification_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('notification_id', 'certificate_id', name='uq_dest_not_ids')
    )
    op.create_index('certificate_notification_associations_ix', 'certificate_notification_associations', ['notification_id', 'certificate_id'], unique=False)
    op.create_table('certificate_replacement_associations',
    sa.Column('replaced_certificate_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['replaced_certificate_id'], ['certificates.id'], ondelete='cascade')
    )
    op.create_index('certificate_replacement_associations_ix', 'certificate_replacement_associations', ['replaced_certificate_id', 'certificate_id'], unique=True)
    op.create_table('certificate_source_associations',
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ondelete='cascade')
    )
    op.create_index('certificate_source_associations_ix', 'certificate_source_associations', ['source_id', 'certificate_id'], unique=False)
    op.create_table('endpoints',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner', sa.String(length=128), nullable=True),
    sa.Column('name', sa.String(length=128), nullable=True),
    sa.Column('dnsname', sa.String(length=256), nullable=True),
    sa.Column('type', sa.String(length=128), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('port', sa.Integer(), nullable=True),
    sa.Column('policy_id', sa.Integer(), nullable=True),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('sensitive', sa.Boolean(), nullable=True),
    sa.Column('last_updated', sqlalchemy_utils.types.arrow.ArrowType(), nullable=False),
    sa.Column('date_created', sqlalchemy_utils.types.arrow.ArrowType(), nullable=False),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ),
    sa.ForeignKeyConstraint(['policy_id'], ['policy.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.Column('log_type', sa.Enum('key_view', 'create_cert', 'update_cert', 'revoke_cert', 'delete_cert', name='log_type'), nullable=False),
    sa.Column('logged_at', sqlalchemy_utils.types.arrow.ArrowType(), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pending_cert_destination_associations',
    sa.Column('destination_id', sa.Integer(), nullable=True),
    sa.Column('pending_cert_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['destination_id'], ['destinations.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['pending_cert_id'], ['pending_certs.id'], ondelete='cascade')
    )
    op.create_index('pending_cert_destination_associations_ix', 'pending_cert_destination_associations', ['destination_id', 'pending_cert_id'], unique=False)
    op.create_table('pending_cert_notification_associations',
    sa.Column('notification_id', sa.Integer(), nullable=True),
    sa.Column('pending_cert_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['pending_cert_id'], ['pending_certs.id'], ondelete='cascade')
    )
    op.create_index('pending_cert_notification_associations_ix', 'pending_cert_notification_associations', ['notification_id', 'pending_cert_id'], unique=False)
    op.create_table('pending_cert_replacement_associations',
    sa.Column('replaced_certificate_id', sa.Integer(), nullable=True),
    sa.Column('pending_cert_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['pending_cert_id'], ['pending_certs.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['replaced_certificate_id'], ['certificates.id'], ondelete='cascade')
    )
    op.create_index('pending_cert_replacement_associations_ix', 'pending_cert_replacement_associations', ['replaced_certificate_id', 'pending_cert_id'], unique=False)
    op.create_table('pending_cert_role_associations',
    sa.Column('pending_cert_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['pending_cert_id'], ['pending_certs.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    op.create_index('pending_cert_role_associations_ix', 'pending_cert_role_associations', ['pending_cert_id', 'role_id'], unique=False)
    op.create_table('pending_cert_source_associations',
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('pending_cert_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['pending_cert_id'], ['pending_certs.id'], ondelete='cascade'),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ondelete='cascade')
    )
    op.create_index('pending_cert_source_associations_ix', 'pending_cert_source_associations', ['source_id', 'pending_cert_id'], unique=False)
    op.create_table('roles_authorities',
    sa.Column('authority_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    op.create_index('roles_authorities_ix', 'roles_authorities', ['authority_id', 'role_id'], unique=False)
    op.create_table('roles_certificates',
    sa.Column('certificate_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['certificate_id'], ['certificates.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    op.create_index('roles_certificates_ix', 'roles_certificates', ['certificate_id', 'role_id'], unique=False)
    op.create_table('roles_users',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    op.create_index('roles_users_ix', 'roles_users', ['user_id', 'role_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('roles_users_ix', table_name='roles_users')
    op.drop_table('roles_users')
    op.drop_index('roles_certificates_ix', table_name='roles_certificates')
    op.drop_table('roles_certificates')
    op.drop_index('roles_authorities_ix', table_name='roles_authorities')
    op.drop_table('roles_authorities')
    op.drop_index('pending_cert_source_associations_ix', table_name='pending_cert_source_associations')
    op.drop_table('pending_cert_source_associations')
    op.drop_index('pending_cert_role_associations_ix', table_name='pending_cert_role_associations')
    op.drop_table('pending_cert_role_associations')
    op.drop_index('pending_cert_replacement_associations_ix', table_name='pending_cert_replacement_associations')
    op.drop_table('pending_cert_replacement_associations')
    op.drop_index('pending_cert_notification_associations_ix', table_name='pending_cert_notification_associations')
    op.drop_table('pending_cert_notification_associations')
    op.drop_index('pending_cert_destination_associations_ix', table_name='pending_cert_destination_associations')
    op.drop_table('pending_cert_destination_associations')
    op.drop_table('logs')
    op.drop_table('endpoints')
    op.drop_index('certificate_source_associations_ix', table_name='certificate_source_associations')
    op.drop_table('certificate_source_associations')
    op.drop_index('certificate_replacement_associations_ix', table_name='certificate_replacement_associations')
    op.drop_table('certificate_replacement_associations')
    op.drop_index('certificate_notification_associations_ix', table_name='certificate_notification_associations')
    op.drop_table('certificate_notification_associations')
    op.drop_index('certificate_destination_associations_ix', table_name='certificate_destination_associations')
    op.drop_table('certificate_destination_associations')
    op.drop_index('certificate_associations_ix', table_name='certificate_associations')
    op.drop_table('certificate_associations')
    op.drop_table('roles')
    op.drop_table('pending_certs')
    op.drop_index('ix_certificates_not_after', table_name='certificates')
    op.drop_index('ix_certificates_name', table_name='certificates')
    op.drop_index('ix_certificates_id_desc', table_name='certificates')
    op.drop_index(op.f('ix_certificates_deleted'), table_name='certificates')
    op.drop_index('ix_certificates_cn', table_name='certificates')
    op.drop_table('certificates')
    op.drop_index('policies_ciphers_ix', table_name='policies_ciphers')
    op.drop_table('policies_ciphers')
    op.drop_table('authorities')
    op.drop_table('api_keys')
    op.drop_table('users')
    op.drop_table('sources')
    op.drop_table('rotation_policies')
    op.drop_table('policy')
    op.drop_table('pending_dns_authorizations')
    op.drop_table('notifications')
    op.drop_index('ix_domains_name_gin', table_name='domains')
    op.drop_index(op.f('ix_domains_name'), table_name='domains')
    op.drop_table('domains')
    op.drop_table('dns_providers')
    op.drop_table('destinations')
    op.drop_table('ciphers')
    # ### end Alembic commands ###
